{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useModali = undefined;\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _shortid = require('shortid');\n\nvar _shortid2 = _interopRequireDefault(_shortid);\n\nrequire('./modali.css');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Button = function Button(_ref) {\n  var onClick = _ref.onClick,\n      label = _ref.label,\n      isStyleDefault = _ref.isStyleDefault,\n      isStyleCancel = _ref.isStyleCancel,\n      isStyleDestructive = _ref.isStyleDestructive;\n  var buttonClass = (0, _classnames2.default)({\n    'modali-button': true,\n    'modali-button-cancel': isStyleCancel,\n    'modali-button-default': isStyleDefault,\n    'modali-button-destructive': isStyleDestructive\n  });\n  return _react2.default.createElement('button', {\n    type: 'button',\n    className: buttonClass,\n    onClick: onClick\n  }, label);\n};\n\nButton.defaultProps = {\n  isStyleDefault: false,\n  isStyleCancel: false,\n  isStyleDestructive: false\n};\nButton.propTypes = {\n  onClick: _propTypes2.default.func.isRequired,\n  label: _propTypes2.default.string.isRequired,\n  isStyleDefault: _propTypes2.default.bool,\n  isStyleCancel: _propTypes2.default.bool,\n  isStyleDestructive: _propTypes2.default.bool\n};\n\nvar Modal = function Modal(_ref2) {\n  var isModalVisible = _ref2.isModalVisible,\n      hide = _ref2.hide,\n      options = _ref2.options,\n      children = _ref2.children;\n\n  function handleOverlayClicked(e) {\n    if (e.target.className !== 'modali-wrapper') {\n      return;\n    }\n\n    if (options === undefined) {\n      hide();\n    } else {\n      if (options.overlayClose !== false) {\n        hide();\n      }\n\n      if (options.onOverlayClicked) {\n        options.onOverlayClicked();\n      }\n    }\n  }\n\n  function renderBody() {\n    if (children) {\n      return children;\n    }\n\n    if (options && options.message) {\n      return _react2.default.createElement('div', {\n        className: 'modali-body-style'\n      }, options.message);\n    }\n\n    return false;\n  }\n\n  function renderFooter() {\n    var buttons = options.buttons;\n    return _react2.default.createElement('div', {\n      className: 'modali-footer'\n    }, buttons.map(function (button) {\n      return _react2.default.createElement(_react2.default.Fragment, {\n        key: _shortid2.default.generate()\n      }, button);\n    }));\n  }\n\n  var modaliWrapperClass = (0, _classnames2.default)({\n    'modali-wrapper': true,\n    'modali-wrapper-centered': options && options.centered\n  });\n  var modaliClass = (0, _classnames2.default)({\n    modali: true,\n    'modali-size-large': options && options.large,\n    'modali-size-regular': !options || options && !options.large,\n    'modali-animated modali-animation-fade-in': options && options.animated\n  });\n  return isModalVisible ? _reactDom2.default.createPortal(_react2.default.createElement(_react2.default.Fragment, null, _react2.default.createElement('div', {\n    className: 'modali-overlay'\n  }), _react2.default.createElement('div', {\n    className: modaliWrapperClass,\n    'aria-modal': true,\n    'aria-hidden': true,\n    tabIndex: -1,\n    role: 'dialog',\n    onClick: handleOverlayClicked\n  }, _react2.default.createElement('div', {\n    className: modaliClass\n  }, _react2.default.createElement('div', {\n    className: 'modali-content'\n  }, options !== undefined && options.closeButton === false ? null : _react2.default.createElement('div', {\n    className: 'modali-header'\n  }, options !== undefined && options.title !== undefined && _react2.default.createElement('div', {\n    className: 'modali-title'\n  }, options.title), _react2.default.createElement('button', {\n    type: 'button',\n    className: 'modali-close-button',\n    'data-dismiss': 'modal',\n    'aria-label': 'Close',\n    onClick: hide\n  }, _react2.default.createElement('span', {\n    'aria-hidden': 'true'\n  }, '\\xD7'))), _react2.default.createElement('div', {\n    className: 'modali-body'\n  }, renderBody()), options && options.buttons && options.buttons.length > 0 && renderFooter())))), document.body) : null;\n};\n\nvar Modali = function Modali() {};\n\nModali.Button = Button;\nModali.Modal = Modal;\nexports.default = Modali;\n\nvar useModali = exports.useModali = function useModali(options) {\n  var _useState = (0, _react.useState)(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasToggledBefore = _useState2[0],\n      setHasToggledBefore = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isModalVisible = _useState4[0],\n      setIsModalVisible = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isShown = _useState6[0],\n      setIsShown = _useState6[1];\n\n  var isModalVisibleRef = (0, _react.useRef)(isModalVisible);\n  isModalVisibleRef.current = isModalVisible;\n  var timeoutHack = void 0;\n\n  function toggle() {\n    timeoutHack = setTimeout(function () {\n      setIsModalVisible(!isModalVisibleRef.current);\n      clearTimeout(timeoutHack);\n    }, 10);\n    setIsShown(!isShown);\n    setHasToggledBefore(true);\n  }\n\n  function handleKeyDown(event) {\n    if (event.keyCode !== 27 || options && options.keyboardClose === false) return;\n    toggle();\n\n    if (options && options.onEscapeKeyDown) {\n      options.onEscapeKeyDown();\n    }\n  }\n\n  (0, _react.useEffect)(function () {\n    if (isShown) {\n      if (options && options.onShow) {\n        options.onShow();\n      }\n\n      document.addEventListener('keydown', handleKeyDown);\n      document.body.classList.add('modali-open');\n    }\n\n    if (!isShown && hasToggledBefore) {\n      if (options && options.onHide) {\n        options.onHide();\n      }\n\n      document.body.classList.remove('modali-open');\n    }\n\n    return function () {\n      return document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isShown]);\n  return [{\n    isShown: isShown,\n    isModalVisible: isModalVisible,\n    hide: toggle,\n    options: options\n  }, toggle];\n};","map":null,"metadata":{},"sourceType":"script"}